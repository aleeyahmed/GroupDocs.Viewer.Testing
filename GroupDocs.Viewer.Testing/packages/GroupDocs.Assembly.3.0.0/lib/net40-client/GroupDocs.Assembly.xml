<?xml version="1.0"?>
<doc>
  <assembly>
    <name>GroupDocs.Assembly</name>
  </assembly>
  <members>
    <member name="T:GroupDocs.Assembly.DocumentAssembler">
      <summary>
            Provides routines to populate template documents with data and a set of settings to control these routines.
            </summary>
      <dev>
            NOTE: If Aspose.Words' reporting engine physically moved to GroupDocs.Assembly, it would be possible to change 
                  the design and use <see cref="T:Aspose.Reporting.ITemplateReader" /> and <see cref="T:Aspose.Reporting.IReportWriter" /> implementations here 
                  directly rather than via facades.
            </dev>
    </member>
    <member name="M:GroupDocs.Assembly.DocumentAssembler.#ctor">
      <summary>
            Initializes a new instance of this class.
            </summary>
    </member>
    <member name="M:GroupDocs.Assembly.DocumentAssembler.AssembleDocument(System.String,System.String,System.Object)">
      <summary>
            Loads a template document from the specified source path, populates the template document with data from 
            the specified source, and stores the result document to the target path.
            </summary>
      <remarks>
            Using this overload you can reference the data source's members in the template document, but you can not 
            reference the data source object itself. 
            
            You should use the <see cref="M:GroupDocs.Assembly.DocumentAssembler.AssembleDocument(System.String,System.String,System.Object,System.String)" /> overload to achieve this.
            </remarks>
      <param name="sourcePath">The path of a template document to be populated with data.</param>
      <param name="targetPath">The path of a result document.</param>
      <param name="dataSource">A data source object.</param>
    </member>
    <member name="M:GroupDocs.Assembly.DocumentAssembler.AssembleDocument(System.String,System.String,System.Object,System.String)">
      <summary>
            Loads a template document from the specified source path, populates the template document with data from 
            the specified source, and stores the result document to the target path.
            </summary>
      <remarks>
            Using this overload you can reference the data source's members and the data source object itself in the template. 
            If you are not going to reference the data source object itself, you can omit <paramref name="dataSourceName" /> 
            passing null or use the <see cref="M:GroupDocs.Assembly.DocumentAssembler.AssembleDocument(System.String,System.String,System.Object)" /> overload.
            </remarks>
      <param name="sourcePath">The path of a template document to be populated with data.</param>
      <param name="targetPath">The path of a result document.</param>
      <param name="dataSource">A data source object.</param>
      <param name="dataSourceName">A name to reference the data source object in the template.</param>
    </member>
    <member name="M:GroupDocs.Assembly.DocumentAssembler.AssembleDocument(System.IO.Stream,System.IO.Stream,System.Object)">
      <summary>
            Loads a template document from the specified source stream, populates the template document with data from 
            the specified source, and stores the result document to the target stream.
            </summary>
      <remarks>
            Using this overload you can reference the data source's members in the template document, but you can not 
            reference the data source object itself. 
            
            You should use the <see cref="M:GroupDocs.Assembly.DocumentAssembler.AssembleDocument(System.IO.Stream,System.IO.Stream,System.Object,System.String)" /> overload to achieve this.
            </remarks>
      <param name="sourceStream">The stream to read a template document from.</param>
      <param name="targetStream">The stream to write a result document.</param>
      <param name="dataSource">A data source object.</param>
    </member>
    <member name="M:GroupDocs.Assembly.DocumentAssembler.AssembleDocument(System.IO.Stream,System.IO.Stream,System.Object,System.String)">
      <summary>
            Loads a template document from the specified source stream, populates the template document with data from 
            the specified source, and stores the result document to the target stream.
            </summary>
      <remarks>
            Using this overload you can reference the data source's members and the data source object itself in the template. 
            If you are not going to reference the data source object itself, you can omit <paramref name="dataSourceName" /> 
            passing null or use the <see cref="M:GroupDocs.Assembly.DocumentAssembler.AssembleDocument(System.IO.Stream,System.IO.Stream,System.Object)" /> overload.
            </remarks>
      <param name="sourceStream">The stream to read a template document from.</param>
      <param name="targetStream">The stream to write a result document.</param>
      <param name="dataSource">A data source object.</param>
      <param name="dataSourceName">A name to reference the data source object in the template.</param>
    </member>
    <member name="P:GroupDocs.Assembly.DocumentAssembler.Options">
      <summary>
            Gets or sets a set of flags controlling behavior of this <see cref="T:GroupDocs.Assembly.DocumentAssembler" /> instance 
            while assembling a document.
            </summary>
    </member>
    <member name="P:GroupDocs.Assembly.DocumentAssembler.KnownTypes">
      <summary>
            Gets an unordered set (i.e. a collection of unique items) containing <see cref="T:System.Type" /> objects 
            which fully or partially qualified names can be used within document templates processed by this 
            assembler instance to invoke the corresponding types' static members, perform type casts, etc. 
            </summary>
    </member>
    <member name="P:GroupDocs.Assembly.DocumentAssembler.UseReflectionOptimization">
      <summary>
            Gets or sets a value indicating whether invocations of custom type members performed via reflection API are 
            optimized using dynamic class generation or not. The default value is true.
            </summary>
      <remarks>
            There are some scenarios where it is preferrable to disable this optimization. For example, if you are dealing 
            with small collections of data items all the time, then an overhead of dynamic class generation can be more 
            noticeable than an overhead of direct reflection API calls.
            </remarks>
      <dev>
            Normally, such settings should be located in configuration files, but it seems like there is no autoportable way 
            to achieve this.
            </dev>
    </member>
    <member name="T:GroupDocs.Assembly.DocumentAssemblyOptions">
      <summary>
            Specifies options controlling behavior of <see cref="T:GroupDocs.Assembly.DocumentAssembler" /> while assembling a document.
            </summary>
    </member>
    <member name="F:GroupDocs.Assembly.DocumentAssemblyOptions.None">
      <summary>
            Specifies default options.
            </summary>
    </member>
    <member name="F:GroupDocs.Assembly.DocumentAssemblyOptions.AllowMissingMembers">
      <summary>
            Specifies that missing object members should be treated as null literals by the assembler. This option 
            affects only access to instance (that is, non-static) object members and extension methods. If this 
            option is not set, the assembler throws an exception when encounters a missing object member.
            </summary>
    </member>
    <member name="T:GroupDocs.Assembly.KnownTypeSet">
      <summary>
            Represents an unordered set (i.e. a collection of unique items) containing <see cref="T:System.Type" /> objects 
            which fully or partially qualified names can be used within document templates to invoke the corresponding 
            types' static members, perform type casts, etc. 
            </summary>
      <dev>
            This class is just a facade of <see cref="T:Aspose.Reporting.KnownTypeSetCore" />. Descriptional comments of these classes 
            should be kept in sync.
            </dev>
    </member>
    <member name="M:GroupDocs.Assembly.KnownTypeSet.Add(System.Type)">
      <summary>
        <para>Adds the specified <see cref="T:System.Type" /> object to the set. Throws <see cref="T:System.ArgumentException" /> in
            the following cases:</para>
        <para>- <paramref name="type" /> is null.</para>
        <para>- <paramref name="type" /> represents a void type.</para>
        <para>- <paramref name="type" /> represents an invisible type, i.e. a non-public type or a public nested type
            which has a non-public outer type.</para>
        <para>- <paramref name="type" /> represents a generic type.</para>
        <para>- <paramref name="type" /> represents an array type.</para>
        <para>- <paramref name="type" /> has been added to the set already.</para>
      </summary>
      <param name="type">A <see cref="T:System.Type" /> object to add.</param>
    </member>
    <member name="M:GroupDocs.Assembly.KnownTypeSet.Remove(System.Type)">
      <summary>
            Removes the specified <see cref="T:System.Type" /> object from the set. Throws <see cref="T:System.ArgumentException" /> if
            <paramref name="type" /> is null.
            </summary>
      <param name="type">A <see cref="T:System.Type" /> object to remove.</param>
    </member>
    <member name="M:GroupDocs.Assembly.KnownTypeSet.Clear">
      <summary>
            Removes all items from the set.
            </summary>
    </member>
    <member name="M:GroupDocs.Assembly.KnownTypeSet.GetEnumerator">
      <summary>
            Returns An <see cref="T:System.Collections.IEnumerator" /> object to iterate over items of the set.
            </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object to iterate over items of the set.</returns>
    </member>
    <member name="P:GroupDocs.Assembly.KnownTypeSet.Count">
      <summary>
            Gets the count of items in the set.
            </summary>
    </member>
    <member name="T:GroupDocs.Assembly.License">
      <summary>
            Provides methods to license the component.
            </summary>
    </member>
    <member name="M:GroupDocs.Assembly.License.#ctor">
      <summary>
            Initializes a new instance of this class.
            </summary>
    </member>
    <member name="M:GroupDocs.Assembly.License.SetLicense(System.String)">
      <summary>
            Licenses the component.
            </summary>
      <remarks>
        <p>Tries to find the license in the following locations:</p>
        <p>1. Explicit path.</p>
        <p>2. The folder that contains the GroupDocs component assembly.</p>
        <p>3. The folder that contains the client's calling assembly.</p>
        <p>4. The folder that contains the entry (startup) assembly.</p>
        <p>5. An embedded resource in the client's calling assembly.</p>
      </remarks>
      <param name="licenseName">Can be a full or short file name or name of an embedded resource.
            Use an empty string to switch to evaluation mode.</param>
    </member>
    <member name="M:GroupDocs.Assembly.License.SetLicense(System.IO.Stream)">
      <summary>
            Licenses the component.
            </summary>
      <param name="stream">A stream that contains the license.</param>
      <remarks>
        <p>Use this method to load a license from a stream.</p>
      </remarks>
    </member>
    <member name="P:GroupDocs.Assembly.License.IsLicensed">
      <summary>
            Returns true if a valid license has been applied; false if the component is running in evaluation mode.
            </summary>
    </member>
  </members>
</doc>